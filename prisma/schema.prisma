// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String            @id @default(cuid())
    name                String?
    email               String?           @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    projects            Project[]
    projectsParticipant UsersInProjects[]
    invites             Invite[]
    watitngFor          WatitngFor[]
    answers             Answer[]
    assignedTasks       Task[]            @relation("AssignedTasks")
    createdTasks        Task[]            @relation("CreatedTasks")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Projects

model Project {
    id           String            @id @default(cuid())
    owner        User              @relation(fields: [ownerId], references: [id])
    ownerId      String
    name         String
    description  String?           @db.Text
    status       Status            @default(NONE)
    createdAt    DateTime          @default(now())
    participants UsersInProjects[]
    invites      Invite[]
    stages       ProjectStage[]
    files        File[]
    watitngFor   WatitngFor[]
    tasks        Task[]
}

enum Status {
    NONE
    IN_PROGRESS
    COMPLETED
    SUSPENDED
    CANCELLED
}

model Invite {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    createdAt DateTime @default(now())

    @@unique([userId, projectId])
}

model ProjectStage {
    id        String   @id @default(cuid())
    stage     String   @db.Text
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    createdAt DateTime @default(now())
}

model Task {
    id           String    @id @default(cuid())
    name         String
    priority     Priority  @default(NONE)
    description  String?   @db.Text
    dueDate      DateTime?
    assignedTo   User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
    assignedToId String?
    project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId    String
    createdBy    User      @relation("CreatedTasks", fields: [createdById], references: [id])
    createdById  String
    createdAt    DateTime  @default(now())
}

enum Priority {
    NONE
    LOW
    MID
    HIGH
}

model WatitngFor {
    id          String   @id @default(cuid())
    name        String
    description String?  @db.Text
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId   String
    createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    createdAt   DateTime @default(now())
    delivered   Boolean  @default(false)
    files       File[]
    answers     Answer[]
}

model Answer {
    id           String     @id @default(cuid())
    text         String     @db.Text
    waitingFor   WatitngFor @relation(fields: [waitingForId], references: [id], onDelete: Cascade)
    waitingForId String
    createdBy    User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById  String
    createdAt    DateTime   @default(now())
}

model File {
    id           String      @id @default(cuid())
    project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId    String
    waitingFor   WatitngFor? @relation(fields: [waitingForId], references: [id])
    waitingForId String?
    name         String
    type         String
    createdAt    DateTime    @default(now())
}

model UsersInProjects {
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId  String
    assignedAt DateTime @default(now())

    @@id([userId, projectId])
}
